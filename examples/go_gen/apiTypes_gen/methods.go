// THIS FILE IS AUTOGENERATED BY A CCL TOOL. DO NOT EDIT.

package apiTypes_gen

import (
	"bytes"
	"encoding/binary"
	"time"
)

const (
	_ = time.April
	_ = bytes.MinRead
	_ = binary.MaxVarintLen16
)


//------------------------------------------------------------

func (m *AuthRequest) GetModelId() int {
	return ModelIdAuthRequest
}

func (m *AuthRequest) SerializeBinary() ([]byte, error) {
	if m == nil {
		return []byte{0}, nil
	}

	buf := new(bytes.Buffer)

	if err := binary.Write(buf, binary.LittleEndian, uint32(len(m.Username))); err != nil {
		return nil, err
	}
	if _, err := buf.WriteString(m.Username); err != nil {
		return nil, err
	}
	if err := binary.Write(buf, binary.LittleEndian, uint32(len(m.Password))); err != nil {
		return nil, err
	}
	if _, err := buf.WriteString(m.Password); err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

func (m *AuthRequest) DeserializeBinary(data []byte) error {
	buf := bytes.NewReader(data)

	var usernameLen uint32
	if err := binary.Read(buf, binary.LittleEndian, &usernameLen); err != nil {
		return err
	}
	usernameStrBytes := make([]byte, usernameLen)
	if _, err := buf.Read(usernameStrBytes); err != nil {
		return err
	}
	m.Username = string(usernameStrBytes)
	var passwordLen uint32
	if err := binary.Read(buf, binary.LittleEndian, &passwordLen); err != nil {
		return err
	}
	passwordStrBytes := make([]byte, passwordLen)
	if _, err := buf.Read(passwordStrBytes); err != nil {
		return err
	}
	m.Password = string(passwordStrBytes)
	return nil
}


//------------------------------------------------------------

func (m *AuthResponse) GetModelId() int {
	return ModelIdAuthResponse
}

func (m *AuthResponse) SerializeBinary() ([]byte, error) {
	if m == nil {
		return []byte{0}, nil
	}

	buf := new(bytes.Buffer)

	if err := binary.Write(buf, binary.LittleEndian, uint32(len(m.Token))); err != nil {
		return nil, err
	}
	if _, err := buf.WriteString(m.Token); err != nil {
		return nil, err
	}
	if err := binary.Write(buf, binary.LittleEndian, m.UserId); err != nil {
		return nil, err
	}
	if err := binary.Write(buf, binary.LittleEndian, uint32(len(m.ProfileImage))); err != nil {
		return nil, err
	}
	if _, err := buf.Write(m.ProfileImage); err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

func (m *AuthResponse) DeserializeBinary(data []byte) error {
	buf := bytes.NewReader(data)

	var tokenLen uint32
	if err := binary.Read(buf, binary.LittleEndian, &tokenLen); err != nil {
		return err
	}
	tokenStrBytes := make([]byte, tokenLen)
	if _, err := buf.Read(tokenStrBytes); err != nil {
		return err
	}
	m.Token = string(tokenStrBytes)
	if err := binary.Read(buf, binary.LittleEndian, &m.UserId); err != nil {
		return err
	}
	var profileImageLen uint32
	if err := binary.Read(buf, binary.LittleEndian, &profileImageLen); err != nil {
		return err
	}
	bytesData := make([]byte, profileImageLen)
	if _, err := buf.Read(bytesData); err != nil {
		return err
	}
	m.ProfileImage = bytesData
	return nil
}


//------------------------------------------------------------

func (m *UserInfo) GetModelId() int {
	return ModelIdUserInfo
}

func (m *UserInfo) SerializeBinary() ([]byte, error) {
	if m == nil {
		return []byte{0}, nil
	}

	buf := new(bytes.Buffer)

	if err := binary.Write(buf, binary.LittleEndian, m.Id); err != nil {
		return nil, err
	}
	if err := binary.Write(buf, binary.LittleEndian, uint32(len(m.Username))); err != nil {
		return nil, err
	}
	if _, err := buf.WriteString(m.Username); err != nil {
		return nil, err
	}
	if err := binary.Write(buf, binary.LittleEndian, uint32(len(m.Email))); err != nil {
		return nil, err
	}
	if _, err := buf.WriteString(m.Email); err != nil {
		return nil, err
	}
	if err := binary.Write(buf, binary.LittleEndian, uint32(len(m.ProfileImage))); err != nil {
		return nil, err
	}
	if _, err := buf.Write(m.ProfileImage); err != nil {
		return nil, err
	}
	if err := binary.Write(buf, binary.LittleEndian, m.CreatedAt.UnixNano()); err != nil {
		return nil, err
	}
	if err := binary.Write(buf, binary.LittleEndian, m.UpdatedAt.UnixNano()); err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

func (m *UserInfo) DeserializeBinary(data []byte) error {
	buf := bytes.NewReader(data)

	if err := binary.Read(buf, binary.LittleEndian, &m.Id); err != nil {
		return err
	}
	var usernameLen uint32
	if err := binary.Read(buf, binary.LittleEndian, &usernameLen); err != nil {
		return err
	}
	usernameStrBytes := make([]byte, usernameLen)
	if _, err := buf.Read(usernameStrBytes); err != nil {
		return err
	}
	m.Username = string(usernameStrBytes)
	var emailLen uint32
	if err := binary.Read(buf, binary.LittleEndian, &emailLen); err != nil {
		return err
	}
	emailStrBytes := make([]byte, emailLen)
	if _, err := buf.Read(emailStrBytes); err != nil {
		return err
	}
	m.Email = string(emailStrBytes)
	var profileImageLen uint32
	if err := binary.Read(buf, binary.LittleEndian, &profileImageLen); err != nil {
		return err
	}
	bytesData := make([]byte, profileImageLen)
	if _, err := buf.Read(bytesData); err != nil {
		return err
	}
	m.ProfileImage = bytesData
	var createdAtUnix int64
	if err := binary.Read(buf, binary.LittleEndian, &createdAtUnix); err != nil {
		return err
	}
	m.CreatedAt = time.Unix(0, createdAtUnix)
	var updatedAtUnix int64
	if err := binary.Read(buf, binary.LittleEndian, &updatedAtUnix); err != nil {
		return err
	}
	m.UpdatedAt = time.Unix(0, updatedAtUnix)
	return nil
}


//------------------------------------------------------------

func (m *GetUsersResult) GetModelId() int {
	return ModelIdGetUsersResult
}

func (m *GetUsersResult) SerializeBinary() ([]byte, error) {
	if m == nil {
		return []byte{0}, nil
	}

	buf := new(bytes.Buffer)

	if err := binary.Write(buf, binary.LittleEndian, uint32(len(m.Users))); err != nil {
		return nil, err
	}
	for _, elem := range m.Users {
		currentBytes, err := elem.SerializeBinary()
		if err != nil {
			return nil, err
		}
		if err := binary.Write(buf, binary.LittleEndian, uint32(len(currentBytes))); err != nil {
			return nil, err
		}
		if err := binary.Write(buf, binary.LittleEndian, currentBytes); err != nil {
			return nil, err
		}
	}
	if err := binary.Write(buf, binary.LittleEndian, uint32(len(m.OtherUsers))); err != nil {
		return nil, err
	}
	for _, elem := range m.OtherUsers {
		currentBytes, err := elem.SerializeBinary()
		if err != nil {
			return nil, err
		}
		if err := binary.Write(buf, binary.LittleEndian, uint32(len(currentBytes))); err != nil {
			return nil, err
		}
		if err := binary.Write(buf, binary.LittleEndian, currentBytes); err != nil {
			return nil, err
		}
	}
	return buf.Bytes(), nil
}

func (m *GetUsersResult) DeserializeBinary(data []byte) error {
	buf := bytes.NewReader(data)

	var usersLen uint32
	if err := binary.Read(buf, binary.LittleEndian, &usersLen); err != nil {
		return err
	}
	m.Users = make([]*UserInfo, usersLen)
	for i := uint32(0); i < usersLen; i++ {
		var elem *UserInfo = new(UserInfo)
		var elemLen uint32
		if err := binary.Read(buf, binary.LittleEndian, &elemLen); err != nil {
			return err
		}
		elemBytes := make([]byte, elemLen)
		if _, err := buf.Read(elemBytes); err != nil {
			return err
		}
		if err := elem.DeserializeBinary(elemBytes); err != nil {
			return err
		}
		m.Users[i] = elem
	}
	var otherUsersLen uint32
	if err := binary.Read(buf, binary.LittleEndian, &otherUsersLen); err != nil {
		return err
	}
	m.OtherUsers = make([]*UserInfo, otherUsersLen)
	for i := uint32(0); i < otherUsersLen; i++ {
		var elem *UserInfo = new(UserInfo)
		var elemLen uint32
		if err := binary.Read(buf, binary.LittleEndian, &elemLen); err != nil {
			return err
		}
		elemBytes := make([]byte, elemLen)
		if _, err := buf.Read(elemBytes); err != nil {
			return err
		}
		if err := elem.DeserializeBinary(elemBytes); err != nil {
			return err
		}
		m.OtherUsers[i] = elem
	}
	return nil
}

